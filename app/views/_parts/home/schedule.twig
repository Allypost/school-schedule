<div class="row">
    <div class="col s12">
        <div class="schedule z-depth-2 row">
            {% raw %}
                <div class="row schedule-week"
                     :class="'week-' + week" :data-week="week + ':'"
                     v-for="(days, week) in schedule">
                    <div class="row schedule-header">
                        <div class="col offset-s1"></div>
                        <div class="col s2 schedule-day"
                             v-for="(periods, day) in days">
                            {{ day | capitalize }}
                        </div>
                    </div>
                    <div class="row schedule-days">
                        <div class="col offset-s1"></div>
                        <div class="col s2 schedule-day"
                             v-for="(periods, day) in days">
                            <div class="col s12 schedule-hour"
                                 :data-period="period"
                                 v-for="(data, period) in periods">
                                <template v-if="isTeacher">
                                    <span :data-day="day" :data-week="week" :data-period="period">
                                        <template v-if="!data.owned && data.hasClass">
                                            {{ data.name }}
                                        </template>
                                        <template v-else>
                                            <span class="schedule-hour-loading hide"></span>
                                            <select onChange="scheduleVM.subjectChange(this, this.options)" class="browser-default">
                                                <option value="-1">/</option>
                                                <option :selected="data.subject == subject.subject"
                                                        :value="subject.id" :data-subject="JSON.stringify(subject)"
                                                        v-for="subject in teaching">
                                                    {{ subject.name  }}
                                                </option>
                                            </select>
                                        </template>
                                    </span>
                                </template>
                                <template v-else>
                                    <span :data-day="day" :data-week="week" :data-period="period" :data-status="data.status">
                                        {{ data.hasClass ? data.name : '/' }}
                                    </span>
                                </template>
                            </div>
                        </div>
                    </div>
                </div>
            {% endraw %}
        </div>
        <script>
            var scheduleMatrix = {};

            var weeks   = [ 1, 2 ];
            var days    = {{ days|json_encode|raw }};
            var periods = Array.apply(null, Array(5)).map(function (_, i) {
                return i + 1;
            });

            for (var week in weeks) {
                if (!weeks.hasOwnProperty(week))
                    continue;

                var w = weeks[ week ];

                if (!scheduleMatrix[ w ])
                    scheduleMatrix[ w ] = {};


                for (var day in days) {
                    if (!days.hasOwnProperty(day))
                        continue;

                    var d = days[ day ];

                    if (!scheduleMatrix[ w ][ d ])
                        scheduleMatrix[ w ][ d ] = {};


                    for (var period in periods) {
                        if (!periods.hasOwnProperty(period))
                            continue;

                        var p = periods[ period ];

                        scheduleMatrix[ w ][ d ][ p ] = { hasClass: false, owned: false, isLoading: false, subject: -1 };
                    }
                }
            }

            var scheduleVM = new Vue({
                el     : '.schedule',
                data   : {
                    week     : '{{ week }}',
                    days     : {{ days|json_encode|raw }},
                    schedule : scheduleMatrix,
                    teaching : [],
                    isTeacher: {{ app.auth.isTeacher()|json_encode|raw }}
                },
                filters: {
                    lower     : function (el) {
                        return el.toString().toLowerCase();
                    },
                    capitalize: function (value) {
                        if (!value) return '';
                        value = value.toString();
                        return value.charAt(0).toUpperCase() + value.slice(1);
                    }
                },
                methods: {
                    pingy           : function (el) {
                        console.log(el);
                    },
                    subjectChange   : function (el, options) {
                        var subject = Number(options[ options.selectedIndex ].value);

                        var $d = $(el.parentNode);

                        var w = $d.attr('data-week');
                        var d = $d.attr('data-day');
                        var p = $d.attr('data-period');

                        var data = {
                            lesson_id: subject,
                            week     : w,
                            day      : d,
                            period   : p
                        };

                        this.subjectPropagate(data, $d.parent());
                    },
                    subjectDisable  : function ($el) {
                        $el.find('.schedule-hour-loading').removeClass('hide');
                        $el.find('select').attr('disabled', 'disabled');
                    },
                    subjectEnable   : function ($el) {
                        $el.find('.schedule-hour-loading').addClass('hide');
                        $el.find('select').removeAttr('disabled', 'disabled');
                    },
                    subjectPropagate: function (data, $el) {
                        this.subjectDisable($el);

                        var vm = this;

                        data[ '{{ csrf_key }}' ] = '{{ csrf_token }}';

                        $.ajax(
                            {
                                url   : '{{ urlFor('api:lessons:update') }}',
                                method: 'POST',
                                data  : data
                            }
                         )
                         .always(function () {
                             vm.subjectEnable($el);
                         });
                    }
                }
            });

            $.get('{{ urlFor('api:lessons:schedule') }}')
             .done(function (data) {
                 var classes = data.data;
                 for (var c in classes) {
                     if (!classes.hasOwnProperty(c))
                         continue;

                     var cl = classes[ c ];
                     var w  = cl.week;
                     var d  = cl.day;
                     var p  = cl.period;

                     cl[ 'isLoading' ] = false;
                     cl[ 'hasClass' ]  = true;

                     scheduleVM.schedule[ w ][ d ][ p ] = cl;
                 }
             })
             .fail(function () {
                 Materialize.toast("Couldn't get schedule!", 3000, 'status error');
             });

            {% if app.auth.isTeacher() %}
            $.get('{{ urlFor('api:lessons:teaching') }}')
             .done(function (data) {
                 scheduleVM.teaching = data.data;
             })
             .fail(function () {
                 Materialize.toast("Couldn't get classes!", 3000, 'status error');
             });
            {% endif %}
        </script>
        <link rel="stylesheet" href="/css/schedule.css?_t={{ date().timestamp }}">
    </div>
</div>
