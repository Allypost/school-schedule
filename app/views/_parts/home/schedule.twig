{% block head %}
    <link rel="stylesheet" href="/css/schedule.css?v=1.3">
{% endblock %}

{% set isTeacher = app.auth.isTeacher() %}

<div class="row">
    <div class="col s12">
        <div class="schedule z-depth-2 row"
             data-teacher="{{ isTeacher|raw }}"
             data-schedule="{{ urlFor('api:lessons:schedule') }}" data-status="{{ urlFor('api:lessons:update:status') }}"
             data-teaching="{{ urlFor('api:lessons:teaching') }}" data-subject="{{ urlFor('api:lessons:update') }}">
            <div class="row schedule-week"
                 :class="'week-' + week" :data-week="week + ':'"
                 v-for="(days, week) in schedule">
                <div class="row schedule-header">
                    <div class="col offset-s1"></div>
                    <div class="col s2 schedule-day"
                         v-for="(periods, day) in days">
                        {{ '{{' }} day | capitalize {{ '}}' }}
                    </div>
                </div>
                {% raw %}
                    <div class="row schedule-days">
                        <div class="col offset-s1"></div>
                        <div class="col s2 schedule-day"
                             v-for="(periods, day) in days">
                            <div class="col s12 schedule-hour"
                                 :data-period="period" :class="{ 'schedule-teacher': isTeacher }"
                                 v-for="(data, period) in periods">
                                <template v-if="isTeacher">
                                    <span :data-day="day" :data-week="week" :data-period="period">
                                        <template v-if="!data.owned && data.hasClass">
                                            {{ data.name }}
                                        </template>
                                        <template v-else>
                                            <span class="schedule-hour-loading"
                                                  v-if="data.isLoading"></span>
                                            <select class="browser-default"
                                                    :disabled="data.isLoading"
                                                    @change="subjectChange($event.currentTarget.options, data, { week: week, day: day, period: period })">
                                                <option :value="subject.id" :selected="data.hasClass && (data.name == subject.name)"
                                                        v-for="subject in teaching">{{ subject.name }}</option>
                                            </select>
                                            <span class="schedule-status dropdown-button"
                                                  :class="'status-' + (data.status ? data.status : 'normal') | lower"
                                                  :data-activates="'dropdown-' + week + '-' + day + '-' + period"
                                                  v-show="data.hasClass && !data.isLoading">!</span>
                                            <ul class='dropdown-content'
                                                :id="'dropdown-' + week + '-' + day + '-' + period">
                                                <li @click="setStatus(data, status, { week: week, day: day, period: period })"
                                                    v-for="(status, name) in statuses">
                                                    <a :class="'status-' + name | lower">{{ name }}</a>
                                                </li>
                                            </ul>
                                        </template>
                                    </span>
                                </template>
                                <template v-else>
                                    <span :data-day="day" :data-week="week" :data-period="period" :data-status="data.hasClass ? data.status : false">{{ data.hasClass ? data.name : '/' }}</span>
                                </template>
                            </div>
                        </div>
                    </div>
                {% endraw %}
            </div>
        </div>
        <script>
            function getWeek() {
                var now            = new Date();
                var onejan         = new Date(now.getFullYear(), 0, 1);
                var millisecsInDay = 86400000;
                var realWeek       = Math.ceil((((now - onejan) / millisecsInDay) + onejan.getDay() + 1) / 7);

                return realWeek % 2 + 1;
            }

            var getScheduleMatrix = function () {
                var scheduleMatrix = {};
                var weeks          = [ 1, 2 ];
                var days           = [ 'mon', 'tue', 'wed', 'thu', 'fri' ];
                var periods        = Array.apply(null, new Array(5)).map(function (_, i) {
                    return i + 1;
                });

                for (var week in weeks) {
                    if (!weeks.hasOwnProperty(week))
                        continue;

                    var w = weeks[ week ];

                    if (!scheduleMatrix[ w ])
                        scheduleMatrix[ w ] = {};


                    for (var day in days) {
                        if (!days.hasOwnProperty(day))
                            continue;

                        var d = days[ day ];

                        if (!scheduleMatrix[ w ][ d ])
                            scheduleMatrix[ w ][ d ] = {};


                        for (var period in periods) {
                            if (!periods.hasOwnProperty(period))
                                continue;

                            var p = periods[ period ];

                            scheduleMatrix[ w ][ d ][ p ] = {
                                id       : null,
                                owner    : null,
                                name     : '',
                                subject  : '',
                                status   : '',
                                due      : null,
                                week     : null,
                                day      : null,
                                period   : null,
                                owned    : false,
                                hasClass : false,
                                isLoading: false
                            };
                        }
                    }
                }

                return scheduleMatrix;
            };

            var scheduleVM = new Vue({
                el      : '.schedule',
                data    : {
                    week     : getWeek(),
                    days     : [ 'mon', 'tue', 'wed', 'thu', 'fri' ],
                    schedule : getScheduleMatrix(),
                    teaching : {},
                    statuses : { Cancelled: "Cancelled", Normal: "" },
                    lastFetch: 0
                },
                computed: {
                    isTeacher: function () {
                        return !!parseInt($(this.$el).attr('data-teacher'));
                    }
                },
                filters : {
                    lower     : function (el) {
                        return el.toString().toLowerCase();
                    },
                    capitalize: function (value) {
                        if (!value) return '';
                        value = value.toString();
                        return value.charAt(0).toUpperCase() + value.slice(1);
                    }
                },
                methods : {
                    getLocation     : function (subject) {
                        return {
                            week  : subject.week,
                            day   : subject.day,
                            period: subject.period
                        }
                    },
                    subjectChange   : function (options, data, location) {
                        var newSubject = options[ options.selectedIndex ];
                        var nsID       = Number(newSubject.value);
                        var nsName     = newSubject.innerText;

                        data.week      = location.week;
                        data.day       = location.day;
                        data.period    = location.period;
                        data.name      = nsName;
                        data.hasClass  = true;
                        data.owned     = true;
                        data.isLoading = true;

                        location.subject = nsID;

                        this.subjectPropagate(location, function (d, status) {
                            data.isLoading = false;

                            if (status == 'error') {
                                Materialize.toast('An error occured', 3000, 'status error');
                                return;
                            }

                            data.hasClass = d.data.new.hasClass;
                        });
                    },
                    setStatus       : function (data, newStatus, location) {
                        data.status    = newStatus;
                        data.isLoading = true;

                        location.status = newStatus;

                        this.statusPropagate(location, function (d, status) {
                            data.isLoading = false;

                            if (status == 'error') {
                                Materialize.toast('An error occured', 3000, 'status error');
                            }
                        });
                    },
                    statusPropagate : function (data, cb) {
                        var url = $(this.$el).attr('data-status');
                        return this.dataPropagate(data, url, cb);
                    },
                    subjectPropagate: function (data, cb) {
                        var url = $(this.$el).attr('data-subject');
                        return this.dataPropagate(data, url, cb);
                    },
                    dataPropagate   : function (data, url, cb) {
                        data[ $('meta[name="csrf_key"]').attr('content') ] = $('meta[name="csrf"]').attr('content');

                        return $.post(url, data)
                                .done(function (data) {
                                    cb(data, 'success');
                                })
                                .fail(function (data) {
                                    cb(data, 'error');
                                });
                    },
                    highlightClass  : function (cls) {
                        if (cls.owned)
                            return;

                        var l  = this.getLocation(cls);
                        var cl = 'schedule-hour-highlight';
                        var id = "span[data-week='{0}'][data-day='{1}'][data-period='{2}']".format(l.week, l.day, l.period);

                        var $el = $(id).parent();

                        $el.addClass(cl);
                        setTimeout(function () {
                            $el.removeClass(cl);
                        }, 850);
                    },
                    getScheduleUrl  : function () {
                        return $(this.$el).attr('data-schedule');
                    },
                    fetchSchedule   : function (cb, recent) {
                        var vm  = this;
                        var url = vm.getScheduleUrl();

                        if (recent)
                            url += '/' + this.lastFetch;

                        $.get(url)
                         .done(function (data) {
                             cb(data, vm, recent);
                             vm.lastFetch = data.timestamp;
                         })
                         .fail(function () {
                             Materialize.toast("Couldn't get schedule!", 3000, 'status error');
                         });
                    },
                    setSchedule     : function (classes, notify) {
                        for (var c in classes) {
                            if (!classes.hasOwnProperty(c))
                                continue;

                            var cl = classes[ c ];
                            var w  = cl.week;
                            var d  = cl.day;
                            var p  = cl.period;

                            cl[ 'isLoading' ]            = false;
                            this.schedule[ w ][ d ][ p ] = cl;

                            if (notify)
                                this.highlightClass(this.schedule[ w ][ d ][ p ]);
                        }

                        this.$forceUpdate();
                    },
                    getTeachingUrl  : function () {
                        return $(this.$el).attr('data-teaching');
                    },
                    fetchTeaching   : function (cb) {
                        var vm  = this;
                        var url = vm.getTeachingUrl();
                        $.get(url)
                         .done(function (data) {
                             cb(data, vm);
                         })
                         .fail(function () {
                             Materialize.toast("Couldn't get classes!", 3000, 'status error');
                         });
                    },
                    setTeaching     : function (data) {
                        for (var id in data) {
                            if (!data.hasOwnProperty(id))
                                continue;

                            var subject = data[ id ];

                            this.teaching[ subject.id ] = subject;
                        }

                        this.$forceUpdate();
                    }
                },
                mounted : function () {
                    var vm = this;

                    $(document).ready(function () {
                        scheduleVM.fetchSchedule(function (data, vm) {
                            vm.setSchedule(data.data);
                        });

                        if (vm.isTeacher) {
                            scheduleVM.fetchTeaching(function (data, vm) {
                                var d = data.data;

                                vm.teaching[ 0 ] = {
                                    due   : null,
                                    id    : -1,
                                    name  : '/',
                                    owner : -1,
                                    status: ''
                                };

                                vm.setTeaching(d);
                            });
                        }

                        window.setInterval(function () {
                            scheduleVM.fetchSchedule(function (data, vm) {
                                vm.setSchedule(data.data, true);
                            }, true);
                        }, 5000);
                    });
                }
            });
        </script>
    </div>
</div>
