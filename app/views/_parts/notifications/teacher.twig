<div class="row" id="notifications"
     data-users="{{ urlFor('api:lessons:attendees:all') }}"
     data-teaching="{{ urlFor('api:lessons:teaching') }}"
     data-notifications="{{ urlFor('api:lessons:notifications') }}">
    <div class="col s12 m10 offset-m1 l6 offset-l3">
        <div class="row">
            <div class="col s12">
                <h2>Notifications</h2>
            </div>
        </div>

        <div class="row notifications-preloader" :data-loaded="isLoaded">
            <div class="col s12">
                <div id="loader" class="row center-align">
                    <div class="preloader-wrapper big active">
                        <div class="spinner-layer spinner-blue-only">
                            <div class="circle-clipper left">
                                <div class="circle"></div>
                            </div>
                            <div class="gap-patch">
                                <div class="circle"></div>
                            </div>
                            <div class="circle-clipper right">
                                <div class="circle"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {% spaceless %}
            {% raw %}
                <div class="row notifications-row" :data-loaded="isLoaded">
                    <div class="col s12">
                        <div class="row">
                            <div class="col s12">
                                <h5>Legend:</h5>
                                <div>
                                    <button class="btn btn-large btn-flat white-text green lighten-2">Has seen the notification</button>
                                    <button class="btn btn-large btn-flat white-text red lighten-2">Hasn't yet seen the notification</button>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col s12">
                                <ul class="collapsible popout" data-collapsible="expandable">
                                    <li v-for="lesson in teaching">
                                        <div class="collapsible-header">
                                            <span class="bold">{{ lesson.name }}</span>
                                            <span class="badge seen" :data-seen="lesson.unseen"></span>
                                            <span v-if="lesson.due" class="badge">[Due {{ lesson.due | date }}]</span>
                                        </div>
                                        <div class="collapsible-body">
                                            <ul class="collapsible popout" data-collapsible="expandable">
                                                <li v-for="notification in notifications[lesson.id]">
                                                    <div class="collapsible-header lighten-4"
                                                         :class="{ 'red': notification.unseen }">{{ notification.message }} <span class="badge">[{{ notification.date | time }}]</span></div>
                                                    <div class="collapsible-body">
                                                        <button class="btn btn-large btn-flat white-text lighten-2"
                                                                :class="[ seen(notification, user) ? 'green' : 'red' ]"
                                                                v-for="user in users[lesson.id]">
                                                            {{ user.name }}
                                                        </button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            {% endraw %}
        {% endspaceless %}
    </div>
</div>
<style>
    /* HIDE HOVER EFFECT */
    button.btn.btn-flat {
        background : transparent;
        cursor     : default;
        margin     : 0 .3em;
    }

    span.badge.seen {
        font-weight      : 300;
        font-size        : 0.8rem;
        color            : #fff;
        background-color : #ef5350;
        border-radius    : 2px;
    }

    span.badge.seen::before {
        content : attr(data-seen);
    }

    span.badge.seen::after {
        content : ' unseen';
    }

    span.badge.seen[data-seen="0"] {
        background-color : #8bc34a;
    }

    .row.notifications-preloader,
    .row.notifications-row[data-loaded] {
        display : initial;
    }

    .row.notifications-preloader[data-loaded],
    .row.notifications-row {
        display : none;
    }
</style>
<script>
    addLoadEvent(function () {
        window.notificationsVM = new Vue(
            {
                el     : '#notifications',
                data   : {
                    users        : {},
                    notifications: {},
                    teaching     : {},
                    loading      : 0,
                    isLoaded     : false
                },
                filters: {
                    date: function (val) {
                        return moment.utc(val).format('DD/MM/YYYY');
                    },
                    time: function (val) {
                        return moment.utc(val).format('DD/MM/YYYY h:mm a');
                    }
                },
                methods: {
                    getUsersUrl        : function () {
                        return $(this.$el).attr('data-users');
                    },
                    fetchField         : function (url, cb) {
                        var vm = this;

                        var hash = url.split("").reduce(function (a, b) {
                            a = ((a << 5) - a) + b.charCodeAt(0);
                            return a & a
                        }, 0);

                        vm.loading ^= hash;

                        if (!isFunction(cb))
                            cb = new Function;

                        return $.get(url)
                                .done(function (d) {
                                    var data = d.data;

                                    cb(true, data);
                                    $('.collapsible').collapsible();
                                })
                                .fail(function (d) {
                                    var data = d.errors;

                                    cb(false, data);
                                })
                                .always(function () {
                                    vm.loading ^= hash;
                                });
                    },
                    fetchUsers         : function (cb) {
                        var vm  = this;
                        var url = vm.getUsersUrl();

                        return vm.fetchField(url, function (success, data) {
                            if (success)
                                vm.setUsers(data);

                            if (!isFunction(cb))
                                cb = new Function;
                            cb();
                        });
                    },
                    setUsers           : function (data) {
                        this.$set(this, 'users', data);
                    },
                    getTeachingUrl     : function () {
                        return $(this.$el).attr('data-teaching');
                    },
                    fetchTeaching      : function (cb) {
                        var vm  = this;
                        var url = this.getTeachingUrl();

                        return vm.fetchField(url, function (success, data) {
                            if (success)
                                vm.setTeaching(data);

                            if (!isFunction(cb))
                                cb = new Function;

                            cb();
                        });
                    },
                    setTeaching        : function (data) {
                        var d = {};

                        for (var i in data) {
                            if (!data.hasOwnProperty(i))
                                continue;

                            var datum = data[ i ];

                            datum.unseen = 0;

                            d[ datum.id ] = datum;
                        }

                        this.$set(this, 'teaching', d);
                    },
                    getNotificationsUrl: function () {
                        return $(this.$el).attr('data-notifications');
                    },
                    fetchNotifications : function (cb) {
                        var vm  = this;
                        var url = this.getNotificationsUrl();

                        return vm.fetchField(url, function (success, data) {
                            if (success)
                                vm.setNotifications(data);

                            if (!isFunction(cb))
                                cb = new Function;
                            cb();
                        });
                    },
                    setNotifications   : function (data) {
                        var d = {};

                        for (var i in data) {
                            if (!data.hasOwnProperty(i))
                                continue;

                            d[ i ] = data[ i ].reverse();

                            for (var j in d[ i ]) {
                                if (!d[ i ].hasOwnProperty(j))
                                    continue;

                                d[ i ][ j ].unseen = 0;
                            }
                        }

                        this.$set(this, 'notifications', d);
                    },
                    fetchData          : function (cb) {
                        var vm = this;

                        if (!isFunction(cb))
                            cb = new Function;

                        var onComplete = function () {
                            return vm.$nextTick(function () {

                                if (vm.loading === 0) {

                                    vm.hydrateUnseen();
                                    $('.collapsible').collapsible();

                                    cb();
                                }

                            });
                        };

                        vm.fetchUsers(onComplete);
                        vm.fetchTeaching(onComplete);
                        vm.fetchNotifications(onComplete);
                    },
                    seen               : function (notification, user) {
                        var notif = moment.utc(notification.date);
                        var usr   = moment.utc(user.seen);

                        return notif.isBefore(usr);
                    },
                    hydrateUnseen      : function () {
                        var vm               = this;
                        var notificationList = vm.notifications;
                        var lessons          = vm.teaching;
                        var usersList        = vm.users;

                        var list = {};

                        for (var lesson in notificationList) {
                            if (!notificationList.hasOwnProperty(lesson))
                                continue;

                            list[ lesson ] = 0;

                            var notifications = notificationList[ lesson ];

                            for (var i in notifications) {
                                if (!notifications.hasOwnProperty(i))
                                    continue;

                                var users = usersList[ lesson ];

                                if (!users)
                                    continue;

                                var notification = notifications[ i ];

                                for (var k in users) {
                                    if (!users.hasOwnProperty(k))
                                        continue;

                                    var user = users[ k ];
                                    var seen = this.seen(notification, user);

                                    notification.unseen += !seen;
                                    list[ lesson ] += !seen;

                                    if (!seen)
                                        vm.$set(notification, 'unseen', notification.unseen);
                                }
                            }

                        }

                        for (var lessonID in list)
                            vm.$set(lessons[ lessonID ], 'unseen', list[ lessonID ]);

                        return list;
                    }
                },
                mounted: function () {
                    var vm = this;

                    vm.fetchData();

                    vm.isLoaded = true;

                    setInterval(vm.fetchData, 2 * 60 * 1000);
                }
            }
        );
    });
</script>
