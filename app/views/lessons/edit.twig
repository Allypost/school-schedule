{% extends '_templates/default.twig' %}

{% block content %}
    <div class="row" id="lessons" data-fetch-url="{{ urlFor('api:lessons:teaching') }}">
        <div class="row">
            <div class="col s12">
                <div class="z-depth-1 lesson-box">
                    <div class="row">
                        <h1 class="lesson-add-header col s12" :data-text="isEditing ? 'Edit' : 'Add'"> lesson</h1>
                    </div>
                    <div class="row">
                        <form class="col s12" action="{{ urlFor('api:lessons:modify') }}" method="POST" style="padding: 0 2em;">
                            <div class="row input-field">
                                <input type="text" name="lesson" id="new-lesson" v-model="newLesson" :disabled="loading">
                                <label for="new-lesson">Lesson name</label>
                            </div>
                            <div class="row">
                                <div class="col s12 right-align">
                                    <button class="btn btn-large right" style="margin-left: 1em;"
                                            :class="{ 'btn-loading': loading, 'btn-error': error, 'btn-success': success }"
                                            :disabled="!(this.newLesson || success) || loading"
                                            @click.prevent="saveLesson">
                                        <i class="material-icons left">save</i>
                                        {{ '{{' }}isEditing ? 'Edit' : 'Add'{{ '}}' }}
                                    </button>
                                    <button class="btn btn-large yellow black-text"
                                            :disabled="!(this.newLesson || lessonEditing || loading)"
                                            @click.prevent="cancelLesson">
                                        <i class="material-icons left">cancel</i> Cancel
                                    </button>
                                </div>
                            </div>
                            <input type="hidden" name="{{ csrf_key }}" value="{{ csrf_token }}">
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col s12">
                <div class="z-depth-1 lesson-box">
                    <div class="row">
                        <h1 class="col s12">Your classes:
                            <span style="padding-left: 1em;padding-top: 2em;font-size: 15px;line-height: 1.1em;opacity: .3;">(Click to edit)</span></h1>
                    </div>
                    <div class="row lessons-attending">
                        <div class="col s6 m3 l2"
                             :data-subject="lesson.id" :class="{'is-edited': lesson.isEdited}"
                             @click="editLesson(lesson)"
                             v-for="lesson in lessons"
                             style="cursor:pointer;">
                            <h5 :class="[ lesson.isEdited ? 'z-depth-4' : 'z-depth-1' ]">{{ '{{' }}lesson.name{{ '}}' }}</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .lesson-add-header::before {
            content : attr(data-text);
        }

        .lesson-box {
            margin  : 1em;
            padding : 0 1.5em 1em;
        }

        .lessons-attending h5 {
            padding    : .2em .4em;
            text-align : center;
            transition : background-color .1s, box-shadow .2s ease-in-out;
        }
    </style>
    <script>
        var lessonsVM = new Vue({
            el     : '#lessons',
            data   : {
                lessons      : [],
                newLesson    : '',
                loading      : true,
                error        : false,
                success      : false,
                isEditing    : false,
                lessonEditing: null,
                btnInterval  : null
            },
            methods: {
                fetchLessons    : function () {
                    var vm  = this;
                    var url = $(this.$el).attr('data-fetch-url');

                    $.get(url)
                     .done(function (d) {
                         vm.lessons = d.data;
                         vm.loading = false;
                     });
                },
                getLesson       : function () {
                    var csrf = getCsrf();

                    var data = {
                        'name': this.newLesson
                    };

                    if (this.isEditing)
                        data[ 'subject' ] = this.lessonEditing.id;

                    data[ csrf.key ] = csrf.value;

                    return data;
                },
                editLesson      : function (lesson) {
                    this.clearLesson();

                    this.newLesson     = lesson.name;
                    this.isEditing     = true;
                    this.lessonEditing = lesson;

                    Vue.set(lesson, 'isEdited', true);

                    this.$nextTick(function () {
                        Materialize.updateTextFields();
                    });
                },
                cancelLesson    : function () {
                    this.clearLesson();
                },
                saveLesson      : function () {
                    var vm = this;

                    vm.loading = true;

                    var url  = $(lessonsVM.$el).find('form').attr('action');
                    var data = this.getLesson();

                    $.post(url, data)
                     .done(function (d) {
                         if (vm.isEditing)
                             vm.saveEditedLesson(d);
                         else
                             vm.saveNewLesson(d);

                         vm.clearLesson();
                         vm.btnStatus('success');
                     })
                     .fail(function (data) {
                         data = data.responseJSON || { errors: [ 'Something went wrong' ] };

                         vm.btnStatus('error');

                         var errors = data.errors;

                         for (var e in errors) {
                             if (!errors.hasOwnProperty(e))
                                 continue;

                             Materialize.toast(errors[ e ], 5000, 'status error');
                         }
                     })
                     .always(function () {
                         vm.loading = false;
                     });
                },
                saveNewLesson   : function (data) {
                    this.lessons.push(data.data);
                },
                saveEditedLesson: function (data) {
                    var lesson = this.lessonEditing;
                    var d      = data.data;

                    lesson.name = d.name;
                },
                clearLesson     : function () {
                    if (this.lessonEditing)
                        Vue.set(this.lessonEditing, 'isEdited', false);

                    this.newLesson     = '';
                    this.isEditing     = false;
                    this.lessonEditing = null;

                    this.$nextTick(function () {
                        Materialize.updateTextFields();
                    });
                },
                btnStatus       : function (status, cb) {
                    var vm = this;

                    vm[ status ] = true;

                    window.clearInterval(vm.btnInterval);

                    var fn = function () {
                        vm[ status ] = false;

                        cb = cb || function () {
                            };

                        cb();
                    };

                    if (!cb)
                        vm.btnInterval = window.setTimeout(fn, 1500);

                    return fn;
                }
            }
        });

        lessonsVM.fetchLessons();
    </script>
{% endblock %}
