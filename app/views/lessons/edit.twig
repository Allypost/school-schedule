{% extends '_templates/default.twig' %}

{% block head %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/air-datepicker/2.2.3/js/datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/air-datepicker/2.2.3/js/i18n/datepicker.en.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/6.3.0/sweetalert2.min.js"></script>
    <script src="/js/vendor.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/6.3.0/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/air-datepicker/2.2.3/css/datepicker.min.css">
{% endblock %}

{% block content %}
    <div class="row" id="lessons" data-fetch-url="{{ urlFor('api:lessons:teaching') }}" data-delete-url="{{ urlFor('api:lessons:delete') }}" data-save-url="{{ urlFor('api:lessons:modify') }}">
        <div class="row">
            <div class="col s12">
                <div class="z-depth-1 lesson-box">
                    <div class="row">
                        <h1 class="lesson-add-header col s12" :data-text="isEditing ? 'Edit' : 'Add'"> lesson</h1>
                    </div>
                    <div class="row">
                        <form class="col s12" action="{{ urlFor('api:lessons:modify') }}" method="POST" style="padding: 0 2em;">
                            <div class="row">
                                <div class="col s12 m6 input-field">
                                    <input type="text" name="lesson" id="new-lesson" v-model="newLesson" :disabled="loading">
                                    <label for="new-lesson">Lesson name</label>
                                </div>
                                <div class="col s12 m6 input-field" v-show="lessonEditing">
                                    <input type="text" id="datepicker" :value="(lessonEditing || { 'due' : null }).due | formatDate">
                                    <label class="active">Due date</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col s12 right-align">
                                    <button class="btn btn-large right" style="margin-left: 1em;"
                                            :class="{ 'btn-loading': loading && !deleting, 'btn-error': error, 'btn-success': success }"
                                            :disabled="!newLesson || deleting"
                                            @click.prevent="saveLesson">
                                        <i class="material-icons left">save</i>
                                        {{ '{{' }}isEditing ? 'Edit' : 'Add'{{ '}}' }}
                                    </button>
                                    <button class="btn btn-large red" style="margin-right: .7em;"
                                            :class="{ 'btn-loading': deleting, 'btn-success': deleted, 'btn-error': deletedError }"
                                            :disabled="!(newLesson || lessonEditing) || (loading && !deleting)"
                                            v-if="lessonEditing"
                                            @click.prevent="deleteLesson">
                                        <i class="material-icons left">delete</i> Delete
                                    </button>
                                    <button class="btn btn-large yellow black-text"
                                            :disabled="!(newLesson || lessonEditing) || loading"
                                            @click.prevent="cancelLesson">
                                        <i class="material-icons left">cancel</i> Cancel
                                    </button>
                                </div>
                            </div>
                            <input type="hidden" name="{{ csrf_key }}" value="{{ csrf_token }}">
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col s12">
                <div class="z-depth-1 lesson-box">
                    <div class="row">
                        <h1 class="col s12">Your classes:
                            <span style="padding-left: 1em;padding-top: 2em;font-size: 15px;line-height: 1.1em;opacity: .3;">(Click to edit)</span></h1>
                    </div>
                    <div class="row lessons-attending">
                        <div class="col s6 m3 l2"
                             :data-subject="lesson.id" :class="{'is-edited': lesson.isEdited}"
                             @click="editLesson(lesson)"
                             v-for="lesson in lessons"
                             style="cursor:pointer;">
                            <h5 :class="[ lesson.isEdited ? 'z-depth-4' : 'z-depth-1' ]">{{ '{{' }}lesson.name{{ '}}' }}</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .lesson-add-header::before {
            content : attr(data-text);
        }

        .lesson-box {
            margin  : 1em;
            padding : 0 1.5em 1em;
        }

        .lessons-attending h5 {
            padding    : .2em .4em;
            text-align : center;
            transition : background-color .1s, box-shadow .2s ease-in-out;
        }
    </style>
    <script>
        var lessonsVM = new Vue({
            el     : '#lessons',
            data   : {
                lessons      : [],
                newLesson    : '',
                loading      : true,
                deleting     : false,
                deleted      : false,
                deletedError : false,
                error        : false,
                success      : false,
                isEditing    : false,
                lessonEditing: null,
                datePicker   : null,
                dateFormats  : {
                    db    : 'YYYY-MM-DD',
                    moment: 'dddd D MMM YYYY',
                    picker: 'DD d M yyyy'
                }
            },
            filters: {
                formatDate       : function (date) {
                    if (!date)
                        return '';
                    return moment(date, lessonsVM.dateFormats.db).format(lessonsVM.dateFormats.moment);
                },
                reverseFormatDate: function (date) {
                    if (!date)
                        return '';
                    return moment(date, lessonsVM.dateFormats.moment).format(lessonsVM.dateFormats.db);
                }
            },
            methods: {
                fetchLessons     : function () {
                    var vm  = this;
                    var url = $(this.$el).attr('data-fetch-url');

                    $.get(url)
                     .done(function (d) {
                         vm.lessons = d.data;
                         vm.loading = false;
                     });
                },
                getLesson        : function () {
                    var csrf = getCsrf();

                    var data = {
                        'name': this.newLesson
                    };

                    if (this.isEditing) {
                        var lesson = this.lessonEditing;

                        data[ 'subject' ] = lesson.id;
                        data[ 'due' ]     = lesson.due;
                    }

                    data[ csrf.key ] = csrf.value;

                    return data;
                },
                dateSelect       : function (date) {
                    var d = moment(date);
                    this.dateSet(d);
                },
                dateHide         : function (inst) {
                    var date = inst.$el[ 0 ].value;

                    if (!date)
                        return this.dateSet(null);

                    var formattedDate = this.$options.filters.reverseFormatDate(date);
                    this.dateSelect(formattedDate);
                },
                dateSet          : function (momentDate) {
                    if (!this.lessonEditing)
                        return;

                    if (momentDate === null)
                        return this.lessonEditing.due = null;

                    if (momentDate.isValid())
                        this.lessonEditing.due = momentDate.format(this.dateFormats.db);
                },
                editLesson       : function (lesson) {
                    this.clearLesson();

                    this.newLesson     = lesson.name;
                    this.isEditing     = true;
                    this.lessonEditing = lesson;

                    Vue.set(lesson, 'isEdited', true);

                    this.refreshDatepicker();
                    if (lesson.due)
                        this.datePicker.selectDate(new Date(lesson.due));

                    this.$nextTick(function () {
                        Materialize.updateTextFields();
                    });
                },
                cancelLesson     : function () {
                    this.clearLesson();
                },
                saveLesson       : function () {
                    var vm = this;

                    vm.loading = true;

                    var url  = this.$el.dataset.saveUrl;
                    var data = this.getLesson();

                    $.post(url, data)
                     .done(function (d) {
                         if (vm.isEditing)
                             vm.saveEditedLesson(d);
                         else
                             vm.saveNewLesson(d);

                         vm.clearLesson();
                         vm.btnStatus('success');
                     })
                     .fail(function (data) {
                         vm.displayErrors(data);
                     })
                     .always(function () {
                         vm.loading = false;
                     });
                },
                deleteLesson     : function () {
                    var vm = this;
                    swal(
                        {
                            title             : 'Delete lesson',
                            text              : 'Are you sure you want to delete the lesson?',
                            type              : 'warning',
                            showCancelButton  : true,
                            confirmButtonText : 'Delete',
                            allowOutsideClick : true,
                            confirmButtonColor: '#f44336'
                        }
                    ).then(
                        function () {
                            vm.deletePropagate();
                        },
                        function () {

                        }
                    );
                },
                deletePropagate  : function (cb) {
                    var data = this.getLesson();
                    var vm   = this;
                    var url  = this.$el.dataset.deleteUrl;

                    if (!cb)
                        cb = function () {
                        };

                    vm.loading  = true;
                    vm.deleting = true;

                    $.post(url, data)
                     .done(function () {
                         vm.lessons.splice(vm.lessons.indexOf(vm.lessonEditing), 1);

                         Materialize.toast('Lesson deleted', 1500, 'status success');

                         vm.btnStatus('deleted');
                         vm.clearLesson();
                         cb(true);
                     })
                     .fail(function (data) {
                         vm.displayErrors(data);
                         vm.btnStatus('deletedError');
                         cb(false);
                     })
                     .always(function () {
                         vm.loading  = false;
                         vm.deleting = false;
                     });
                },
                saveNewLesson    : function (data) {
                    this.lessons.push(data.data);
                },
                saveEditedLesson : function (data) {
                    var lesson = this.lessonEditing;
                    var d      = data.data;

                    lesson.name = d.name;
                },
                clearLesson      : function () {
                    if (this.lessonEditing)
                        Vue.set(this.lessonEditing, 'isEdited', false);

                    this.newLesson     = '';
                    this.isEditing     = false;
                    this.lessonEditing = null;

                    this.destroyDatepicker();

                    this.$nextTick(function () {
                        Materialize.updateTextFields();
                    });
                },
                btnStatus        : function (status, cb) {
                    var vm = this;

                    vm[ status ] = true;

                    var fn = function () {
                        vm[ status ] = false;

                        cb = cb || function () {
                            };

                        cb();
                    };

                    if (!cb)
                        window.setTimeout(fn, 1500);

                    return fn;
                },
                displayErrors    : function (data) {
                    data = data.responseJSON || { errors: [ 'Something went wrong' ] };

                    this.btnStatus('error');

                    var errors = data.errors;

                    for (var e in errors) {
                        if (!errors.hasOwnProperty(e))
                            continue;

                        Materialize.toast(errors[ e ], 5000, 'status error');
                    }
                },
                destroyDatepicker: function () {
                    if (!this.datePicker)
                        return;
                    this.datePicker.destroy();
                    this.datePicker = null;
                },
                refreshDatepicker: function () {
                    this.destroyDatepicker();
                    this.createDatepicker();
                },
                createDatepicker : function () {
                    var vm               = this;
                    var threeDaysFromNow = new Date();
                    var days3FromNow     = threeDaysFromNow.getDate() + 3;

                    threeDaysFromNow.setDate(days3FromNow);

                    var opts = {
                        language    : 'en',
                        minDate     : threeDaysFromNow,
                        dateFormat  : this.dateFormats.picker,
                        autoClose   : true,
                        clearButton : true,
                        onSelect    : function (formattedString, date) {
                            vm.dateSelect(date);
                        },
                        onHide      : function (inst, animtaionCompleted) {
                            if (!animtaionCompleted)
                                return;
                            vm.dateHide(inst);
                        },
                        onRenderCell: function (date, cellType) {
                            var disabledDays = [ 0, 6 ];
                            if (cellType == 'day') {
                                var day        = date.getDay(),
                                    isDisabled = disabledDays.indexOf(day) != -1;

                                return {
                                    disabled: isDisabled
                                }
                            }
                        }
                    };

                    var datepicker = $("#datepicker").datepicker().data('datepicker');

                    datepicker.update(opts);

                    this.datePicker = datepicker;
                }
            },
            mounted: function () {
                this.createDatepicker();
            }
        });

        lessonsVM.fetchLessons();
    </script>
    <style>
        nav.datepicker--nav {
            width            : auto;
            background-color : transparent;
            color            : #000;
        }

        .datepicker--nav-title i {
            font-size : 1em;
        }
    </style>
{% endblock %}
